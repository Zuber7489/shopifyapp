{% comment %}
  Compare Bags Modal Snippet
  This snippet contains all the compare bags functionality including:
  - Modal HTML structure
  - CSS styles
  - JavaScript functionality
  - Event handlers
  
  Usage: {% render 'compare-bags-modal' %}
{% endcomment %}

<!-- Enhanced Compare Bags Modal (New UI Design) -->
<style>
#compareBagsModalV2 {
  display: none; 
  position: fixed; 
  z-index: 10001; 
  left: 0; 
  top: 0; 
  width: 100vw; 
  height: 100vh;
  background: rgba(0,0,0,0.45); 
  overflow: auto; 
  align-items: center; 
  justify-content: center;
}

.compare-modal-content {
  background: #fff; 
  max-width: 700px; 
  width: 90vw; 
  margin: 20px auto; 
  border-radius: 12px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.08); 
  padding: 20px; 
  position: relative;
  max-height: 90vh;
  overflow-y: auto;
}

.compare-modal-close {
  position: absolute; 
  top: 16px; 
  right: 16px; 
  background: none; 
  border: none; 
  font-size: 24px; 
  color: #666; 
  cursor: pointer;
}

.compare-modal-header {
  text-align: center; 
  margin-bottom: 16px;
}

.compare-modal-title {
  font-size: 18px; 
  font-weight: 500; 
  color: #333; 
  margin: 0;
}

.compare-modal-tabs {
  display: flex; 
  margin: 16px 29px; 
  
  background: #f5f5f5; 
  border-radius: 20px; 
  padding: 3px;
  justify-content: center;
}

.compare-modal-tab {
  flex: 1; 
  text-align: center; 
  padding: 8px 16px; 
  font-size: 14px; 
  font-weight: 500; 
  color: #666;
  background: none; 
  border: none; 
  cursor: pointer; 
  border-radius: 20px;
  transition: all 0.3s ease;
}

.compare-modal-tab.active {
  background: #4a6f64; 
  color: #fff;
}

.compare-modal-grid {
  display: flex;
  gap: 16px;
  padding: 0;
}

#compareBagsGridWrap {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px !important;
  flex-grow: 1;
}

.compare-modal-category-label {
  font-size: 13px;
  color: #B8860B;
  font-weight: 400;
  transform: rotate(-90deg);
  text-align: center;
  white-space: nowrap;
  position: absolute;
  left: -7px;
  top: 50%;
  transform: translateY(-50%) rotate(-90deg);
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.compare-modal-specs,
.compare-modal-features,
.compare-modal-fabric,
.compare-modal-tech-specs,
.compare-modal-overview,
.compare-modal-available-in-wrapper {
  position: relative;
  padding-left: 50px;
}

/* Hide the old left-side labels */
.compare-modal-labels {
  display: none !important;
}

.compare-modal-divider {
  height: 1px;
  background: #e0e0e0;
  margin: 12px 0;
  width: 100%;
}

.compare-modal-product {
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 16px;
  align-items: center;
}

.compare-modal-img-wrap {
  margin-bottom: 0;
  background: #f8f8f8;
  border-radius: 8px;
  padding: 15px;
  height: 215px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 80%;
  max-width: 236px;
  margin: 0 auto;
  border: 1px solid #e0e0e0;
}

.compare-modal-img {
  width: 100%; 
  height: 100%;
  object-fit: contain;
  border-radius: 4px;
}

.compare-modal-product-title {
  font-size: 13px;
  font-weight: bold;
  color: #333;
  margin: 8px 0 12px 0;
  order: 1;
  text-align: center;
}

.compare-modal-specs {
  font-size: 12px;
  color: #666;
  margin: 0;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px 20px;
  order: 2;
  text-align: center;
  width: 100%;
}

.compare-modal-spec-item {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 4px 0;
  gap: 4px;
}

.compare-modal-spec-value {
  color: #333;
  font-size: 13px;
  font-weight: 500;
  text-align: center;
  margin: 0;
}

.compare-modal-specs-golden-labels {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px 20px;
  margin-top: 0;
  width: 100%;
}

.compare-modal-golden-label {
  font-size: 10px;
  color: #B8860B;
  font-weight: 500;
  text-align: center;
  margin: 0;
}

.compare-modal-features {
  padding: 0;
  margin: 0;
  text-align: left;
  font-size: 12px;
  color: #666;
  min-height: 120px;
  order: 3;
  width: 100%;
  position: relative;
}

.compare-modal-features::before {
  content: '';
  position: absolute;
  top: -12px;
  left: 0;
  right: 0;
  height: 1px;
  background-color: #e0e0e0;
}

.compare-modal-features ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.compare-modal-features li {
  margin-bottom: 4px; 
  position: relative; 
  padding-left: 12px;
  line-height: 1.4;
}

.compare-modal-features li:before {
  content: '•'; 
  position: absolute; 
  left: 0;
  color: #333;
  font-weight: bold;
}

.compare-modal-features p {
  margin: 0 0 8px 0;
  line-height: 1.4;
}

.compare-modal-features strong,
.compare-modal-features b {
  font-weight: 600;
  color: #333;
}

.compare-modal-features em,
.compare-modal-features i {
  font-style: italic;
}

.compare-modal-capacity {
  font-size: 12px; 
  color: #999; 
  margin: 8px 0;
}

.compare-modal-available-in {
  order: 4;
  width: 100%;
  margin-top: 16px;
  background: #f8f8f8;
  padding: 16px;
  border-radius: 8px;
  margin-bottom: 16px;
}

.compare-modal-button {
  display: inline-block; 
  padding: 8px 32px; 
  border-radius: 25px; 
  font-size: 14px;
  font-weight: 500; 
  text-decoration: none; 
  cursor: pointer; 
  min-width: 250px;
  transition: all 0.3s ease;
  text-align: center;
  margin-top: 12px;
}

.compare-modal-available-in-content {
  display: flex;
  align-items: center;
  gap: 20px;
  justify-content: flex-start;
}

.compare-modal-available-in-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  position: relative;
}

.compare-modal-available-in-item.selected {
  position: relative;
}

.compare-modal-available-in-item.selected::after {
  content: '';
  position: absolute;
  bottom: -4px;
  left: 50%;
  transform: translateX(-50%);
  width: 100%;
  height: 1px;
  background-color: #ccc;
}

.compare-modal-available-in-thumbnail {
  width: 40px;
  height: 40px;
  background: #f8f8f8;
  border-radius: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #e0e0e0;
  cursor: pointer;
}

.compare-modal-available-in-item.selected .compare-modal-available-in-thumbnail {
  background: #f0f0f0;
  border: 1px solid #ccc;
}

.compare-modal-available-in-thumbnail img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 4px;
}

.compare-modal-available-in-material {
  font-size: 12px;
  color: #B8860B;
  text-align: center;
  font-weight: 500;
}

.compare-modal-available-in-price {
  font-size: 13px;
  font-weight: 600;
  color: #333;
  margin-left: 16px;
  margin-top: 24px;
}

.compare-modal-button {
  order: 5;
  margin-top: 12px;
}

.compare-modal-button {
  display: inline-block; 
  padding: 8px 32px; 
  border-radius: 25px; 
  font-size: 14px;
  font-weight: 500; 
  text-decoration: none; 
  cursor: pointer; 
  min-width: 250px;
  transition: all 0.3s ease;
  text-align: center;
}

.compare-modal-button.primary {
  background: #2f6f6f; 
  color: white; 
  border: none;
}

.compare-modal-button.secondary {
  background: #2f6f6f; 
  color: white; 
  border: none;
}

.compare-modal-grid { 
  align-items: stretch; 
}

/* Fabric tab specific styles */
.compare-modal-fabric {
  font-size: 12px;
  color: #333;
  margin: 0;
  order: 2;
  text-align: left;
  font-weight: 600;
  width: 100%;
}

.compare-modal-fabric strong {
  text-align: left;
  display: block;
  width: 100%;
}

.compare-modal-tech-specs {
  font-size: 12px;
  color: #666;
  margin: 0;
  text-align: left;
  order: 3;
  line-height: 1.4;
  width: 100%;
}

.compare-modal-tech-specs p {
  margin: 0 0 12px 0;
  line-height: 1.5;
}

.compare-modal-tech-specs strong,
.compare-modal-tech-specs b {
  font-weight: 600;
  color: #333;
}

.compare-modal-tech-specs em,
.compare-modal-tech-specs i {
  font-style: italic;
  color: #555;
}

.compare-modal-overview {
  font-size: 12px;
  color: #666;
  margin: 0;
  text-align: left;
  order: 4;
  line-height: 1.4;
  width: 100%;
}

.compare-modal-overview p {
  margin: 0 0 8px 0;
  line-height: 1.5;
}

.compare-modal-overview strong,
.compare-modal-overview b {
  font-weight: 600;
  color: #333;
}

.compare-modal-overview em,
.compare-modal-overview i {
  font-style: italic;
  color: #555;
}

.compare-modal-available-in-wrapper {
  order: 5;
  margin-top: 30px;
  {% comment %} padding: 20px; {% endcomment %}
  border-top: 1px solid #e0e0e0;
  background-color: #f8f8f8;
  border-radius: 0;
  {% comment %} margin-left: -50px; {% endcomment %}
  margin-right: -19px;
  margin-bottom: -20px;
  {% comment %} width: calc(100% + 100px); {% endcomment %}
}

@media (max-width: 480px) {
  .compare-modal-content { 
    margin: 12px; 
    padding: 12px 0; 
  }
  .compare-modal-grid { 
    gap: 12px; 
    padding: 0 12px; 
    margin-bottom: 12px; 
  }
  .compare-modal-product-title { 
    font-size: 9px; 
  }
  .compare-modal-specs, .compare-modal-features { 
    font-size: 10px; 
  }
}

@media (max-width: 700px) {
  .compare-modal-content { 
    max-width: 99vw; 
    padding: 0 0 18px 0; 
  }
  #compareBagsGridWrap { 
    grid-template-columns: repeat(2, 1fr) !important; 
    gap: 12px !important; 
  }
  .compare-modal-img { 
    width: 55px; 
    height: 65px; 
  }
  .compare-modal-title { 
    font-size: 12px; 
    margin-top:20px; 
  }
  .compare-modal-price { 
    font-size: 13px; 
  }
}

@media (max-width: 700px) {
  #compareBagsModalV2 {
    align-items: flex-end !important;
    justify-content: center !important;
    background: rgba(0,0,0,0.45);
    transition: background 0.3s;
    overflow-y: auto;
  }
  .compare-modal-content {
    width: 100vw !important;
    max-width: 100vw !important;
    border-radius: 18px 18px 0 0 !important;
    margin: 0 !important;
    padding-bottom: env(safe-area-inset-bottom, 16px) !important;
    position: relative;
    bottom: 0;
    left: 0;
    animation: compareModalSlideUp 0.35s cubic-bezier(0.4,0,0.2,1);
    box-shadow: 0 -2px 16px rgba(0,0,0,0.12);
    max-height: 80vh;
    overflow-y: auto;
  }
  @keyframes compareModalSlideUp {
    from { transform: translateY(100%); }
    to   { transform: translateY(0); }
  }
}

@media (max-width: 700px) {
  .compare-modal-content {
    max-height: 80vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
}

/* Compare Bags button styles */
.comparemobilebtn {
  border: 2px solid #2f7d7d; 
  color: #2f7d7d; 
  background: transparent; 
  padding: 6px 16px; 
  border-radius: 20px; 
  font-size: 18px; 
  cursor: pointer; 
  margin-bottom: 6px; 
  position: relative; 
  z-index: 100;
}

.comparedesktopbtn {
  border: 2px solid #2f7d7d; 
  color: #2f7d7d; 
  background: transparent; 
  padding: 6px 16px; 
  border-radius: 20px; 
  font-size: 18px; 
  cursor: pointer; 
  margin: 0; 
  position: relative; 
  z-index: 100; 
  pointer-events: auto;
}

@media (max-width: 900px) {
  .comparemobilebtn {
    display: block !important;
    margin-right: 0 !important;
    font-size: 13px !important;
    padding: 4px 8px !important;
  }
  
  .comparedesktopbtn {
    display: none !important;
  }
  
  .mobile-compare-review {
    display: flex !important;
    margin-top: 10px !important;
    margin-bottom: 15px !important;
    min-width: 129px !important;
    justify-content: flex-end !important;
  }
  
  /* Ensure mobile button is visible in mobile-single-image section */
  .mobile-single-image .mobile-compare-review {
    display: flex !important;
    width: 100% !important;
    justify-content: flex-end !important;
  }
}

@media (min-width: 901px) {
  .comparedesktopbtn {
    display: block;
    font-size: 15px !important;
    padding: 5px 14px !important;
    font-weight: 400 !important;
    position: relative !important;
    z-index: 100 !important;
    pointer-events: auto !important;
  }
  
  .mobile-compare-review {
    display: none !important;
  }
  
  .comparemobilebtn {
    display: none !important;
  }
}

@media (max-width: 375px) {
  .mobile-compare-review {
    display: flex !important;
    margin-top: -96px !important;
    min-width: 305px !important;
  }
}
</style>

<!-- Compare Bags Modal HTML -->
<div id="compareBagsModalV2">
  <div class="compare-modal-content">
    <button class="compare-modal-close" id="compareModalClose">&times;</button>
    <div class="compare-modal-header">
      <h2 class="compare-modal-title">Compare Bags</h2>
    </div>
    <div class="compare-modal-tabs" id="compareModalTabs" style="display: none;">
      <button class="compare-modal-tab active" id="compareTabSize" data-tab="size">Size</button>
      <button class="compare-modal-tab" id="compareTabFabric" data-tab="fabric">Fabric</button>
    </div>
    <div class="compare-modal-grid">
      <div id="compareBagsGridWrap" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 24px;">
        <!-- Grid will be rendered here -->
      </div>
    </div>
  </div>
</div>

<!-- Compare Bags JavaScript -->
<script>
// Immediate fallback function to prevent errors
if (typeof window.openCompareBagsModalV2 === 'undefined') {
  window.openCompareBagsModalV2 = function() {
    console.log('openCompareBagsModalV2 called (FALLBACK)');
    // Wait for the real function to be available
    setTimeout(function() {
      if (typeof window.openCompareBagsModalV2 === 'function' && window.openCompareBagsModalV2.toString().includes('REAL FUNCTION')) {
        window.openCompareBagsModalV2();
      } else {
        console.error('Real function not available yet');
      }
    }, 100);
  };
}

console.log('Compare modal script starting to load...');

// Function to decode HTML entities
function decodeHtmlEntities(text) {
  if (!text) return text;
  const textarea = document.createElement('textarea');
  textarea.innerHTML = text;
  return textarea.value;
}

// Function to parse rich text JSON and preserve HTML formatting
function parseRichText(richTextJson) {
  if (!richTextJson) return '';
  
  try {
    // If it's already HTML, return as is
    if (typeof richTextJson === 'string' && !richTextJson.startsWith('{')) {
      return richTextJson;
    }
    
    // Try to parse as JSON first
    if (typeof richTextJson === 'string') {
      try {
        const richText = JSON.parse(richTextJson);
        if (richText && richText.children) {
          function extractHTML(node) {
            if (typeof node === 'string') return node;
            
            if (node.type === 'text') {
              return node.value || '';
            }
            
            if (node.type === 'paragraph') {
              const content = node.children ? node.children.map(extractHTML).join('') : '';
              return `<p>${content}</p>`;
            }
            
            if (node.type === 'bold' || node.bold) {
              const content = node.children ? node.children.map(extractHTML).join('') : (node.value || '');
              return `<strong>${content}</strong>`;
            }
            
            if (node.type === 'italic' || node.italic) {
              const content = node.children ? node.children.map(extractHTML).join('') : (node.value || '');
              return `<em>${content}</em>`;
            }
            
            if (node.type === 'list-item') {
              const content = node.children ? node.children.map(extractHTML).join('') : '';
              return `<li>${content}</li>`;
            }
            
            if (node.type === 'bulleted-list') {
              const content = node.children ? node.children.map(extractHTML).join('') : '';
              return `<ul>${content}</ul>`;
            }
            
            if (node.type === 'numbered-list') {
              const content = node.children ? node.children.map(extractHTML).join('') : '';
              return `<ol>${content}</ol>`;
            }
            
            if (node.children && Array.isArray(node.children)) {
              return node.children.map(extractHTML).join('');
            }
            
            return node.value || '';
          }
          
          const html = richText.children.map(extractHTML).join('');
          console.log('Parsed rich text to HTML:', html);
          return html;
        }
      } catch (jsonError) {
        console.log('JSON parsing failed, trying regex fallback');
      }
    }
    
    // Fallback: extract text using regex from the JSON string
    if (typeof richTextJson === 'string') {
      const valueMatches = richTextJson.match(/"value":"([^"]*?)"/g);
      if (valueMatches) {
        const extractedText = valueMatches.map(match => {
          const value = match.replace(/"value":"/, '').replace(/"$/, '');
          return value
            .replace(/\\n/g, ' ')
            .replace(/\\"/g, '"')
            .replace(/\\/g, '')
            .trim();
        }).filter(text => text.length > 0).join(' ');
        
        if (extractedText) {
          return extractedText;
        }
      }
    }
    
    return richTextJson || '';
  } catch (error) {
    console.log('Error parsing rich text:', error);
    return richTextJson || '';
  }
}

// Add error handling for metafield data
try {

// Dynamic product data from Shopify with metafields - using JSON data from product template
const compareProductsData = {
  currentProduct: {
    id: {{ product.id | default: 0 }},
    title: "{{ product.title | escape | default: 'Product' }}",
    image: "{{ product.featured_image | img_url: '300x300' | default: '' }}",
    price: "{{ current_variant.price | money | default: product.price | money }}",
    url: "{{ product.url | default: '#' }}",
    isCurrentProduct: true,
    // Current variant data - using JSON data from product template with rich text parsing
    capacity: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.capacity)) || "{{ current_variant.option1 | default: '20L' }}",
    dimensions: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.dimensions)) || "19\" x 18\" x 4\"",
    weight: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.weight)) || "2.5lbs",
    fabric: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.fabric)) || "420D Cordura Polycarbonate Nylon",
    features: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.features)) || "Water bottle pocket, Luggage pass through, Laptop compartment, Carry handle, Water proof, Zippers, Tech caddy",
    techSpecs: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.techSpecs)) || "Silicon Face Coating: This coating provides extreme weather, strain abrasion resistance without changing the look and hand feel of the fabric. Coal PU Backside: This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.",
    overview: parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.overview)) || "Premium quality bag designed for modern lifestyle.",
    // Available colors/variants
    colors: [
      {% for variant in product.variants %}
        {% if variant.option1 contains 'Color' or variant.option1 contains 'color' %}
          "{{ variant.option1 }}",
        {% endif %}
      {% endfor %}
    ]
  },
  
  // Get size variants for comparison - using JSON data
  sizeVariants: window.productMetafieldsData?.allVariants?.filter(variant => {
    // Check if this variant has a different size than the current one
    const currentVariant = window.productMetafieldsData?.currentVariant;
    if (!currentVariant) return false;
    
    console.log('=== SIZE VARIANT CHECK ===');
    console.log('Checking variant:', variant.id, 'option1:', variant.option1, 'option2:', variant.option2);
    console.log('Current variant:', currentVariant.id, 'option1:', currentVariant.option1, 'option2:', currentVariant.option2);
    
    // Since both variants have same size (20L), there should be no size variants
    // Only include if they have different sizes
    if (variant.option2 !== currentVariant.option2 && variant.option1 === currentVariant.option1) {
      console.log('Found size variant - different size:', variant.option2);
      return true;
    }
    
    if (variant.option1 !== currentVariant.option1 && variant.option2 === currentVariant.option2) {
      console.log('Found size variant - different size:', variant.option1);
      return true;
    }
    
    console.log('No size variant found');
    return false;
  }).map(variant => ({
    id: variant.id,
    title: "{{ product.title | escape }} " + variant.option1,
    image: variant.image,
    price: variant.price,
    url: "{{ product.url }}?variant=" + variant.id,
    isCurrentProduct: variant.id == {{ current_variant.id | default: 'null' }},
    variantTitle: variant.option1,
    capacity: parseRichText(decodeHtmlEntities(variant.metafields.capacity)) || variant.option1,
    dimensions: parseRichText(decodeHtmlEntities(variant.metafields.dimensions)) || "19\" x 18\" x 4\"",
    weight: parseRichText(decodeHtmlEntities(variant.metafields.weight)) || "2.5lbs",
    fabric: parseRichText(decodeHtmlEntities(variant.metafields.fabric)) || "420D Cordura Polycarbonate Nylon",
    features: parseRichText(decodeHtmlEntities(variant.metafields.features)) || "Water bottle pocket, Luggage pass through, Laptop compartment, Carry handle, Water proof, Zippers, Tech caddy",
    techSpecs: parseRichText(decodeHtmlEntities(variant.metafields.techSpecs)) || "Silicon Face Coating: This coating provides extreme weather, strain abrasion resistance without changing the look and hand feel of the fabric. Coal PU Backside: This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.",
    overview: parseRichText(decodeHtmlEntities(variant.metafields.overview)) || "Premium quality bag designed for modern lifestyle.",
          colors: [
            {% for color_variant in product.variants %}
              {% if color_variant.option1 contains 'Color' or color_variant.option1 contains 'color' %}
                "{{ color_variant.option1 }}",
              {% endif %}
            {% endfor %}
          ]
  })) || [],
  
  // Get fabric variants for comparison - using JSON data
  fabricVariants: window.productMetafieldsData?.allVariants?.filter(variant => {
    // Check if this variant has a different fabric than the current one
    const currentVariant = window.productMetafieldsData?.currentVariant;
    if (!currentVariant) return false;
    
    console.log('=== FABRIC VARIANT CHECK ===');
    console.log('Checking variant:', variant.id, 'option1:', variant.option1, 'option2:', variant.option2);
    console.log('Current variant:', currentVariant.id, 'option1:', currentVariant.option1, 'option2:', currentVariant.option2);
    
    // Check if they have same size but different fabric
    if (variant.option2 === currentVariant.option2 && variant.option1 !== currentVariant.option1) {
      console.log('Found fabric variant - same size, different fabric:', variant.option1);
      return true;
    }
    
    if (variant.option1 === currentVariant.option1 && variant.option2 !== currentVariant.option2) {
      console.log('Found fabric variant - same size, different fabric:', variant.option2);
      return true;
    }
    
    console.log('No fabric variant found');
    return false;
  }).map(variant => ({
    id: variant.id,
    title: "{{ product.title | escape }} " + variant.option2,
    image: variant.image,
    price: variant.price,
    url: "{{ product.url }}?variant=" + variant.id,
    isCurrentProduct: variant.id == {{ current_variant.id | default: 'null' }},
    variantTitle: variant.option2,
    capacity: parseRichText(decodeHtmlEntities(variant.metafields.capacity)) || variant.option1,
    dimensions: parseRichText(decodeHtmlEntities(variant.metafields.dimensions)) || "19\" x 18\" x 4\"",
    weight: parseRichText(decodeHtmlEntities(variant.metafields.weight)) || "2.5lbs",
    fabric: parseRichText(decodeHtmlEntities(variant.metafields.fabric)) || variant.option2,
    features: parseRichText(decodeHtmlEntities(variant.metafields.features)) || "Water bottle pocket, Luggage pass through, Laptop compartment, Carry handle, Water proof, Zippers, Tech caddy",
    techSpecs: parseRichText(decodeHtmlEntities(variant.metafields.techSpecs)) || "Silicon Face Coating: This coating provides extreme weather, strain abrasion resistance without changing the look and hand feel of the fabric. Coal PU Backside: This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.",
    overview: parseRichText(decodeHtmlEntities(variant.metafields.overview)) || "Premium quality bag designed for modern lifestyle.",
          colors: [
            {% for color_variant in product.variants %}
              {% if color_variant.option1 contains 'Color' or color_variant.option1 contains 'color' %}
                "{{ color_variant.option1 }}",
              {% endif %}
            {% endfor %}
          ]
  })) || []
};

console.log('Product data initialized');
console.log('All variants from JSON:', window.productMetafieldsData?.allVariants?.map(v => ({ id: v.id, option1: v.option1, option2: v.option2 })));
console.log('Size variants found:', compareProductsData.sizeVariants.length);
console.log('Fabric variants found:', compareProductsData.fabricVariants.length);
console.log('Current product:', compareProductsData.currentProduct.title);

// Debug metafields data
console.log('=== METAFIELDS DEBUG ===');
{% assign first_variant = product.variants.first %}
{% assign current_variant_fallback = current_variant | default: first_variant %}
console.log('Current variant ID:', {{ current_variant_fallback.id | default: 'null' }});
console.log('Current variant title:', "{{ current_variant_fallback.title | escape }}");
console.log('Product variants count:', {{ product.variants.size }});
console.log('All product variants:', {{ product.variants | map: 'id' | json }});

// Debug metafields using JSON data from product template (parsed and decoded)
console.log('=== METAFIELDS DEBUG (FROM JSON - PARSED) ===');
console.log('Capacity metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.capacity)) || 'NOT SET');
console.log('Dimensions metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.dimensions)) || 'NOT SET');
console.log('Weight metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.weight)) || 'NOT SET');
console.log('Fabric metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.fabric)) || 'NOT SET');
console.log('Features metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.features)) || 'NOT SET');
console.log('Tech specs metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.techSpecs)) || 'NOT SET');
console.log('Overview metafield:', parseRichText(decodeHtmlEntities(window.productMetafieldsData?.currentVariant?.metafields?.overview)) || 'NOT SET');
console.log('=== END METAFIELDS DEBUG ===');

// Debug capacity value
console.log('=== CAPACITY DEBUG ===');
console.log('Capacity value:', compareProductsData.currentProduct.capacity);
console.log('=== END CAPACITY DEBUG ===');


// Function to determine which tabs to show based on available variants
function determineAvailableTabs() {
  const sizeVariants = compareProductsData.sizeVariants || [];
  const fabricVariants = compareProductsData.fabricVariants || [];
  
  console.log('Size variants count:', sizeVariants.length);
  console.log('Fabric variants count:', fabricVariants.length);
  
  // Force the correct logic based on your product structure
  // Since you have 2 variants with same size (20L) but different fabrics (Carbonate/Ballistic)
  // We should only show fabric tab
  
  let defaultTab = 'size';
  let showTabs = false;
  let hasMultipleSizes = false;
  let hasMultipleFabrics = false;
  
  // Check if we have multiple variants with same size but different fabrics
  if (sizeVariants.length === 1 && fabricVariants.length === 1) {
    // This means we have 2 variants with same size but different fabrics
    hasMultipleSizes = false;
    hasMultipleFabrics = true;
    showTabs = false;
    defaultTab = 'fabric';
    console.log('Detected: Same size, different fabrics - showing only fabric tab');
  } else if (sizeVariants.length > 0 && fabricVariants.length === 0) {
    // Only size variants
    hasMultipleSizes = true;
    hasMultipleFabrics = false;
    showTabs = false;
    defaultTab = 'size';
    console.log('Detected: Only size variants - showing only size tab');
  } else if (sizeVariants.length === 0 && fabricVariants.length > 0) {
    // Only fabric variants
    hasMultipleSizes = false;
    hasMultipleFabrics = true;
    showTabs = false;
    defaultTab = 'fabric';
    console.log('Detected: Only fabric variants - showing only fabric tab');
  } else if (sizeVariants.length > 0 && fabricVariants.length > 0) {
    // Both size and fabric variants
    hasMultipleSizes = true;
    hasMultipleFabrics = true;
    showTabs = true;
    defaultTab = 'size';
    console.log('Detected: Both size and fabric variants - showing both tabs');
  } else {
    // No variants
    hasMultipleSizes = false;
    hasMultipleFabrics = false;
    showTabs = false;
    defaultTab = 'size';
    console.log('Detected: No variants - showing only size tab');
  }
  
  return { showTabs, defaultTab, hasMultipleSizes, hasMultipleFabrics };
}

// Define the modal functions immediately
window.openCompareBagsModalV2 = function() {
  console.log('openCompareBagsModalV2 called (REAL FUNCTION)');
  const modal = document.getElementById('compareBagsModalV2');
  console.log('Modal element:', modal);
  
  if (!modal) {
    console.error('Modal element not found!');
    return;
  }
  
  const content = modal.querySelector('.compare-modal-content');
  modal.style.display = 'flex';
  console.log('Modal displayed');
  
  // Determine which tabs to show
  const { showTabs, defaultTab, hasMultipleSizes, hasMultipleFabrics } = determineAvailableTabs();
  
  // Show/hide tabs based on available variants
  const tabsContainer = document.getElementById('compareModalTabs');
  const sizeTab = document.getElementById('compareTabSize');
  const fabricTab = document.getElementById('compareTabFabric');
  
  if (tabsContainer && sizeTab && fabricTab) {
    if (hasMultipleSizes && hasMultipleFabrics) {
      // Both size and fabric variants - show both tabs
      tabsContainer.style.display = 'flex';
      sizeTab.style.display = 'block';
      fabricTab.style.display = 'block';
      // Remove active class from both - let user click to activate
      sizeTab.classList.remove('active');
      fabricTab.classList.remove('active');
      console.log('Showing both Size and Fabric tabs');
    } else if (hasMultipleSizes && !hasMultipleFabrics) {
      // Only size variants - show only size tab
      tabsContainer.style.display = 'flex';
      sizeTab.style.display = 'block';
      fabricTab.style.display = 'none';
      // Make size tab active
      sizeTab.classList.add('active');
      fabricTab.classList.remove('active');
      console.log('Showing only Size tab (active)');
    } else if (!hasMultipleSizes && hasMultipleFabrics) {
      // Only fabric variants - show only fabric tab
      tabsContainer.style.display = 'flex';
      sizeTab.style.display = 'none';
      fabricTab.style.display = 'block';
      // Make fabric tab active
      fabricTab.classList.add('active');
      sizeTab.classList.remove('active');
      console.log('Showing only Fabric tab (active)');
    } else {
      // No variants - show only size tab as default
      tabsContainer.style.display = 'flex';
      sizeTab.style.display = 'block';
      fabricTab.style.display = 'none';
      // Make size tab active
      sizeTab.classList.add('active');
      fabricTab.classList.remove('active');
      console.log('Showing only Size tab (default, active)');
    }
  }
  
  // Reset animation for mobile
  if (window.innerWidth < 700 && content) {
    content.style.animation = 'none';
    void content.offsetWidth; // trigger reflow
    content.style.animation = null;
  }
  
  // Labels are now inside each category div, no need to update separately
  console.log('Opening modal with tab:', defaultTab);
  
  renderCompareBagsTable(defaultTab);
  document.body.style.overflow = 'hidden';
  enableCompareModalScrollLock();
};

// Also make it available on document
document.openCompareBagsModalV2 = window.openCompareBagsModalV2;

console.log('openCompareBagsModalV2 function defined and assigned');
console.log('Function type:', typeof window.openCompareBagsModalV2);

window.closeCompareBagsModalV2 = function() {
  const modal = document.getElementById('compareBagsModalV2');
  if (modal) {
    modal.style.display = 'none';
  }
  document.body.style.overflow = '';
  disableCompareModalScrollLock();
};

// Also make it available on document
document.closeCompareBagsModalV2 = window.closeCompareBagsModalV2;

console.log('closeCompareBagsModalV2 function defined and assigned');

function switchCompareTab(tab) {
  // Check if the tab exists and is visible
  const tabButton = document.querySelector(`[data-tab="${tab}"]`);
  if (!tabButton || tabButton.style.display === 'none') {
    console.log(`Tab ${tab} is not available`);
    return;
  }
  
  // Update tab active states
  document.querySelectorAll('.compare-modal-tab').forEach(tabBtn => {
    tabBtn.classList.remove('active');
  });
  tabButton.classList.add('active');
  
  // Labels are now inside each category div, no need to update separately
  console.log('Switching to tab:', tab);
  
  renderCompareBagsTable(tab);
}

// Dynamic rendering function for variants
function renderCompareBagsTable(tab) {
  console.log('renderCompareBagsTable called with tab:', tab);
  
  try {
    const gridWrap = document.getElementById('compareBagsGridWrap');
    if (!gridWrap) {
      console.error('compareBagsGridWrap element not found');
      return;
    }
    
    // Choose variants based on selected tab
    let variants = [];
    if (tab === 'size') {
      variants = compareProductsData.sizeVariants || [];
    } else if (tab === 'fabric') {
      variants = compareProductsData.fabricVariants || [];
    }
    
    // If no variants found, show only current product with a message
    if (variants.length === 0) {
      const products = [compareProductsData.currentProduct];
      renderProducts(products, tab);
      
      // Show a message that no variants are available
      if (gridWrap.children.length === 1) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'compare-modal-product';
        messageDiv.innerHTML = `
          <div style="text-align: center; padding: 40px; color: #666;">
            <p>No ${tab === 'size' ? 'size' : 'fabric'} variants available for comparison.</p>
            <p style="font-size: 12px; margin-top: 10px;">Please check back later or contact support.</p>
          </div>
        `;
        gridWrap.appendChild(messageDiv);
      }
      return;
    }
    
    // Combine current product with appropriate variants (limit to 2 total)
    const products = [compareProductsData.currentProduct, ...variants].slice(0, 2);
    
    renderProducts(products, tab);
  } catch (error) {
    console.error('Error rendering compare table:', error);
  }
}

function renderProducts(products, tab) {
  console.log('renderProducts called with', products.length, 'products for tab:', tab);
  
  try {
    const gridWrap = document.getElementById('compareBagsGridWrap');
    if (!gridWrap) {
      console.error('compareBagsGridWrap element not found');
      return;
    }
    
    // Render products in grid layout
    let html = '';
    products.forEach(prod => {
      if (tab === 'size') {
        // Size tab content with structured specs in 2x2 grid (values with golden labels below)
        const specsHtml = `
          <div class="compare-modal-spec-item">
            <span class="compare-modal-spec-value">${prod.capacity || '20L'}</span>
            <span class="compare-modal-golden-label">Capacity</span>
          </div>
          <div class="compare-modal-spec-item">
            <span class="compare-modal-spec-value">${prod.dimensions || '19" x 18" x 4"'}</span>
            <span class="compare-modal-golden-label">Dimensions</span>
          </div>
          <div class="compare-modal-spec-item">
            <span class="compare-modal-spec-value">${prod.weight || '2.5lbs'}</span>
            <span class="compare-modal-golden-label">Weight</span>
          </div>
          <div class="compare-modal-spec-item">
            <span class="compare-modal-spec-value">${prod.price}</span>
            <span class="compare-modal-golden-label">Price</span>
          </div>
        `;
        
        // Generate features HTML with proper bullet points
        const featuresList = prod.features ? 
          prod.features.split(/[•\n]/).filter(feature => feature.trim()).map(feature => feature.trim()) : 
          ['Water bottle pocket', 'Luggage pass through', 'Laptop compartment', 'Carry handle', 'Water proof', 'Zippers', 'Tech caddy'];
        
        const featuresHtml = `
          <ul>
            ${featuresList.map(feature => `<li>${feature}</li>`).join('')}
          </ul>
        `;
        
        // Generate Available in section HTML
        const availableInHtml = `
          <div class="compare-modal-available-in">
            <div class="compare-modal-available-in-content">
              <div class="compare-modal-available-in-item selected">
                <div class="compare-modal-available-in-thumbnail">
                  <img src="${prod.image}" alt="Carbonate">
                </div>
                <div class="compare-modal-available-in-material">Carbonate</div>
              </div>
              <div class="compare-modal-available-in-item">
                <div class="compare-modal-available-in-thumbnail">
                  <img src="${prod.image}" alt="Ballistic">
                </div>
                <div class="compare-modal-available-in-material">Ballistic</div>
              </div>
              <div class="compare-modal-available-in-price">${prod.price}</div>
            </div>
            <a href="${prod.url}" class="compare-modal-button ${prod.isCurrentProduct ? 'primary' : 'secondary'}">
              ${prod.isCurrentProduct ? 'Add to Bag' : (tab === 'fabric' ? 'Select Fabric' : 'Select Size')}
            </a>
          </div>
        `;
        
        html += `
          <div class="compare-modal-product">
            <div class="compare-modal-img-wrap">
              <img class="compare-modal-img" src="${prod.image}" alt="${prod.title}">
            </div>
            
            <h3 class="compare-modal-product-title">${prod.title}</h3>
            <div class="compare-modal-specs">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Specs</div>' : ''}
              ${specsHtml}
            </div>
            <div class="compare-modal-features">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Features</div>' : ''}
              ${featuresHtml}
            </div>
            <div class="compare-modal-available-in-wrapper">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Available in</div>' : ''}
            ${availableInHtml}
            </div>
          </div>
        `;
      } else if (tab === 'fabric') {
        // Fabric tab content with structured layout
        const fabricHtml = prod.fabric || 'Fabric type not specified';
        
        // Generate Available in section HTML for fabric tab
        const availableInHtml = `
          <div class="compare-modal-available-in">
            <div class="compare-modal-available-in-content">
              <div class="compare-modal-available-in-item selected">
                <div class="compare-modal-available-in-thumbnail">
                  <img src="${prod.image}" alt="Carbonate">
                </div>
                <div class="compare-modal-available-in-material">Carbonate</div>
              </div>
              <div class="compare-modal-available-in-item">
                <div class="compare-modal-available-in-thumbnail">
                  <img src="${prod.image}" alt="Ballistic">
                </div>
                <div class="compare-modal-available-in-material">Ballistic</div>
              </div>
              <div class="compare-modal-available-in-price">${prod.price}</div>
            </div>
            <a href="${prod.url}" class="compare-modal-button ${prod.isCurrentProduct ? 'primary' : 'secondary'}">
              ${prod.isCurrentProduct ? 'Add to Bag' : (tab === 'fabric' ? 'Select Fabric' : 'Select Size')}
            </a>
          </div>
        `;
        
        html += `
          <div class="compare-modal-product">
            <div class="compare-modal-img-wrap">
              <img class="compare-modal-img" src="${prod.image}" alt="${prod.title}">
            </div>
            
            <div class="compare-modal-fabric">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Fabric</div>' : ''}
              <strong>${fabricHtml}</strong>
            </div>
            <div class="compare-modal-tech-specs">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Tech Specs</div>' : ''}
              ${prod.techSpecs ? `<p>${prod.techSpecs.replace(/\n/g, '</p><p>')}</p>` : '<p><strong>Silicon Face Coating:</strong> This coating provides extra weather, strain, abrasion resistance without changing the look and hand feel of the fabric.</p><p><strong>Coal PU Backside:</strong> This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.</p>'}
            </div>
                        <div class="compare-modal-overview">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Overall Difference</div>' : ''}
              <p><strong>Overall Difference:</strong> ${prod.overview || 'Has a modern technical aesthetic with a smooth supple feel. Has slightly more structure than our ballistic version, without being stiff and rigid like many PU and TPU coated fabrics. It\'s the ideal choice for adventure enthusiast that want a hybrid option to transition between office and outdoors.'}</p>
            </div>
            <div class="compare-modal-available-in-wrapper">
              ${prod.isCurrentProduct ? '<div class="compare-modal-category-label">Available in</div>' : ''}
              ${availableInHtml}
            </div>
          </div>
        `;
      }
    });
    
    gridWrap.innerHTML = html;
    console.log('Modal content rendered successfully with', products.length, 'products');
  } catch (error) {
    console.error('Error rendering products:', error);
  }
}

// Removed renderProducts function - simplified to use direct rendering

// Mobile scroll lock functionality
let compareModalTouchLock = false;

function preventBodyScroll(e) {
  if (!compareModalTouchLock) return;
  const modalContent = document.querySelector('.compare-modal-content');
  if (!modalContent) return;
  
  if (!modalContent.contains(e.target)) {
    e.preventDefault();
    return;
  }
  
  // Allow scroll inside modal content if scrollable
  if (modalContent.scrollHeight > modalContent.clientHeight) {
    return;
  }
  
  // If not scrollable, prevent
  e.preventDefault();
}

function enableCompareModalScrollLock() {
  compareModalTouchLock = true;
  document.body.style.overflow = 'hidden';
  document.addEventListener('touchmove', preventBodyScroll, { passive: false });
  document.addEventListener('wheel', preventBodyScroll, { passive: false });
}

function disableCompareModalScrollLock() {
  compareModalTouchLock = false;
  document.body.style.overflow = '';
  document.removeEventListener('touchmove', preventBodyScroll, { passive: false });
  document.removeEventListener('wheel', preventBodyScroll, { passive: false });
}

// Simple initialization
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded - attaching event listeners');
  attachCompareButtonListeners();
  attachModalEventListeners();
});

// Also try immediately if DOM is already loaded
if (document.readyState !== 'loading') {
  console.log('DOM already loaded - attaching event listeners immediately');
  attachCompareButtonListeners();
  attachModalEventListeners();
}

function attachCompareButtonListeners() {
  // Check if modal exists
  const modal = document.getElementById('compareBagsModalV2');
  console.log('Modal element found:', !!modal);
  
  // Attach to Compare Bags buttons - use multiple selectors for better coverage
  const buttons = document.querySelectorAll('[data-compare-button="true"], #compareBtnMobile, #compareBtnDesktop, .comparedesktopbtn, .comparemobilebtn');
  console.log('Found compare buttons:', buttons.length);
  
  buttons.forEach(btn => {
    if (!btn) return; // Skip if button is null
    
    // Remove any existing listeners to prevent duplicates
    btn.removeEventListener('click', handleCompareButtonClick);
    
    console.log('Adding event listener to button:', btn.id || btn.className);
    btn.addEventListener('click', handleCompareButtonClick);
  });
}

function attachModalEventListeners() {
  // Close modal button
  const closeBtn = document.getElementById('compareModalClose');
  if (closeBtn) {
    closeBtn.addEventListener('click', function(e) {
      e.preventDefault();
      closeCompareBagsModalV2();
    });
  }
  
  // Tab switching
  const tabs = document.querySelectorAll('.compare-modal-tab');
  tabs.forEach(tab => {
    if (!tab) return; // Skip if tab is null
    
    tab.addEventListener('click', function(e) {
      e.preventDefault();
      const tabName = this.getAttribute('data-tab');
      if (tabName) {
        switchCompareTab(tabName);
      }
    });
  });
  
  // Close modal when clicking outside
  const modal = document.getElementById('compareBagsModalV2');
  if (modal) {
    modal.addEventListener('click', function(e) {
      if (e.target === this) {
        closeCompareBagsModalV2();
      }
    });
  }
  
  // Close modal with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const modal = document.getElementById('compareBagsModalV2');
      if (modal && modal.style.display === 'flex') {
        closeCompareBagsModalV2();
      }
    }
  });
}

function handleCompareButtonClick(e) {
  e.preventDefault();
  console.log('Compare button clicked');
  if (typeof openCompareBagsModalV2 === 'function') {
    openCompareBagsModalV2();
  } else {
    console.error('openCompareBagsModalV2 function not available');
  }
}

// Make switchCompareTab globally available
window.switchCompareTab = switchCompareTab;
document.switchCompareTab = switchCompareTab;

console.log('Compare modal script fully loaded');
console.log('Final function availability:');
console.log('- window.openCompareBagsModalV2:', typeof window.openCompareBagsModalV2);
console.log('- document.openCompareBagsModalV2:', typeof document.openCompareBagsModalV2);

// Final check - ensure function is available
if (typeof window.openCompareBagsModalV2 === 'function') {
  console.log('✅ openCompareBagsModalV2 function is ready!');
} else {
  console.error('❌ openCompareBagsModalV2 function is NOT ready!');
}

// Function to update modal with current variant data
window.updateCompareModalWithVariant = function(variantId) {
  console.log('Updating compare modal with variant:', variantId);
  
  // Find the variant data
  const variantData = compareProductsData.sizeVariants.find(v => v.id == variantId) || 
                     compareProductsData.fabricVariants.find(v => v.id == variantId) ||
                     compareProductsData.currentProduct;
  
  if (variantData) {
    // Update current product data
    compareProductsData.currentProduct = {
      ...compareProductsData.currentProduct,
      ...variantData,
      isCurrentProduct: true
    };
    
    // If modal is open, re-render it
    const modal = document.getElementById('compareBagsModalV2');
    if (modal && modal.style.display === 'flex') {
      const activeTab = document.querySelector('.compare-modal-tab.active');
      if (activeTab) {
        const tabName = activeTab.getAttribute('data-tab');
        renderCompareBagsTable(tabName);
      }
    }
  }
};

// Listen for variant changes
document.addEventListener('DOMContentLoaded', function() {
  // Listen for variant selector changes
  const variantSelectors = document.querySelectorAll('select[name="id"], input[name="id"]');
  variantSelectors.forEach(selector => {
    selector.addEventListener('change', function() {
      const variantId = this.value;
      window.updateCompareModalWithVariant(variantId);
    });
  });
  
  // Listen for Shopify variant change events
  if (typeof Shopify !== 'undefined' && Shopify.onVariantChange) {
    Shopify.onVariantChange = function(variant) {
      window.updateCompareModalWithVariant(variant.id);
    };
  }
});

} catch (error) {
  console.error('Error loading compare modal:', error);
  // Ensure function is available even if there's an error
  if (typeof window.openCompareBagsModalV2 === 'undefined') {
    window.openCompareBagsModalV2 = function() {
      console.log('openCompareBagsModalV2 called (ERROR FALLBACK)');
      alert('Modal is loading, please try again in a moment.');
    };
  }
}
</script> 