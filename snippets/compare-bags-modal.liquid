{% comment %}
  Compare Bags Modal Snippet
  This snippet contains all the compare bags functionality including:
  - Modal HTML structure
  - CSS styles
  - JavaScript functionality
  - Event handlers
  
  Usage: {% render 'compare-bags-modal' %}
{% endcomment %}

<!-- Enhanced Compare Bags Modal (New UI Design) -->
<style>
#compareBagsModalV2 {
  display: none; 
  position: fixed; 
  z-index: 10001; 
  left: 0; 
  top: 0; 
  width: 100vw; 
  height: 100vh;
  background: rgba(0,0,0,0.45); 
  overflow: auto; 
  align-items: center; 
  justify-content: center;
}

.compare-modal-content {
  background: #fff; 
  max-width: 900px; 
  width: 95vw; 
  margin: 20px auto; 
  border-radius: 12px;
  box-shadow: 0 2px 12px rgba(0,0,0,0.08); 
  padding: 20px; 
  position: relative;
  max-height: 85vh;
  overflow-y: auto;
}

.compare-modal-close {
  position: absolute; 
  top: 16px; 
  right: 16px; 
  background: none; 
  border: none; 
  font-size: 24px; 
  color: #666; 
  cursor: pointer;
}

.compare-modal-header {
  text-align: center; 
  margin-bottom: 16px;
}

.compare-modal-title {
  font-size: 18px; 
  font-weight: 500; 
  color: #333; 
  margin: 0;
}

.compare-modal-tabs {
  display: flex; 
  margin: 16px 20px; 
  background: #f5f5f5; 
  border-radius: 20px; 
  padding: 3px;
}

.compare-modal-tab {
  flex: 1; 
  text-align: center; 
  padding: 8px 16px; 
  font-size: 14px; 
  font-weight: 500; 
  color: #666;
  background: none; 
  border: none; 
  cursor: pointer; 
  border-radius: 20px;
  transition: all 0.3s ease;
}

.compare-modal-tab.active {
  background: #4a6f64; 
  color: #fff;
}

.compare-modal-grid {
  display: flex;
  gap: 24px;
  padding: 0;
}

#compareBagsGridWrap {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 24px !important;
  flex-grow: 1;
}

.compare-modal-labels {
  text-align: right;
  font-size: 13px;
  color: #B8860B;
  display: flex;
  flex-direction: column;
  gap: 30px;
  padding-top: 140px;
  position: sticky;
  top: 0;
  width: 20px;
  flex-shrink: 0;
}

/* Fabric tab has more labels, so adjust gap */
.compare-modal-labels.fabric-tab {
  gap: 25px;
}

.compare-modal-label {
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  transform: rotate(-90deg);
  margin-top: 13px;
}

.compare-modal-divider {
  height: 1px;
  background: #e0e0e0;
  margin: 12px 0;
  width: 100%;
}

.compare-modal-product {
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.compare-modal-img-wrap {
  margin-bottom: 0;
  background: #f8f8f8;
  border-radius: 6px;
  padding: 15px;
  height: 140px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.compare-modal-img {
  width: 100%; 
  height: 100%;
  object-fit: contain;
}

.compare-modal-product-title {
  font-size: 13px;
  font-weight: 500;
  color: #333;
  margin: 0;
  order: 1;
}

.compare-modal-specs {
  font-size: 11px;
  color: #666;
  margin: 0;
  display: flex;
  flex-direction: column;
  gap: 3px;
  order: 2;
}

.compare-modal-features {
  padding: 0;
  margin: 0;
  text-align: left;
  font-size: 11px;
  color: #666;
  min-height: 120px;
  order: 3;
}

.compare-modal-features ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.compare-modal-features li {
  margin-bottom: 3px; 
  position: relative; 
  padding-left: 10px;
}

.compare-modal-features li:before {
  content: '-'; 
  position: absolute; 
  left: 0;
}

.compare-modal-features p {
  margin: 0 0 8px 0;
  line-height: 1.4;
}

.compare-modal-features strong,
.compare-modal-features b {
  font-weight: 600;
  color: #333;
}

.compare-modal-features em,
.compare-modal-features i {
  font-style: italic;
}

.compare-modal-capacity {
  font-size: 12px; 
  color: #999; 
  margin: 8px 0;
}

.compare-modal-colors {
  display: flex;
  gap: 6px;
  justify-content: center;
  margin: 0;
  order: 4;
}

.compare-modal-color {
  width: 14px; 
  height: 14px; 
  border-radius: 50%; 
  border: 1px solid rgba(0,0,0,0.1);
  cursor: pointer;
}

.compare-modal-price {
  font-size: 14px;
  font-weight: 600;
  color: #333;
  margin: 0;
  order: 5;
}

.compare-modal-button {
  order: 6;
  margin-top: 4px;
}

.compare-modal-button {
  display: inline-block; 
  padding: 6px 16px; 
  border-radius: 16px; 
  font-size: 12px;
  font-weight: 500; 
  text-decoration: none; 
  cursor: pointer; 
  min-width: 80px;
}

.compare-modal-button.primary {
  background: #1a2c2c; 
  color: white; 
  border: none;
}

.compare-modal-button.secondary {
  background: white; 
  color: #1a2c2c; 
  border: 1px solid #e0e0e0;
}

.compare-modal-grid { 
  align-items: stretch; 
}

/* Fabric tab specific styles */
.compare-modal-fabric {
  font-size: 11px;
  color: #666;
  margin: 0;
  order: 2;
}

.compare-modal-tech-specs {
  font-size: 11px;
  color: #666;
  margin: 0;
  text-align: left;
  order: 3;
  line-height: 1.4;
}

.compare-modal-tech-specs p {
  margin: 0 0 8px 0;
}

.compare-modal-tech-specs strong,
.compare-modal-tech-specs b {
  font-weight: 600;
  color: #333;
}

.compare-modal-overview {
  font-size: 11px;
  color: #666;
  margin: 0;
  text-align: left;
  order: 4;
  line-height: 1.4;
}

.compare-modal-overview p {
  margin: 0 0 8px 0;
}

.compare-modal-overview strong,
.compare-modal-overview b {
  font-weight: 600;
  color: #333;
}

@media (max-width: 480px) {
  .compare-modal-content { 
    margin: 12px; 
    padding: 12px 0; 
  }
  .compare-modal-grid { 
    gap: 12px; 
    padding: 0 12px; 
    margin-bottom: 12px; 
  }
  .compare-modal-product-title { 
    font-size: 9px; 
  }
  .compare-modal-specs, .compare-modal-features { 
    font-size: 10px; 
  }
}

@media (max-width: 700px) {
  .compare-modal-content { 
    max-width: 99vw; 
    padding: 0 0 18px 0; 
  }
  #compareBagsGridWrap { 
    grid-template-columns: repeat(2, 1fr) !important; 
    gap: 12px !important; 
  }
  .compare-modal-img { 
    width: 55px; 
    height: 65px; 
  }
  .compare-modal-title { 
    font-size: 12px; 
    margin-top:20px; 
  }
  .compare-modal-price { 
    font-size: 13px; 
  }
}

@media (max-width: 700px) {
  #compareBagsModalV2 {
    align-items: flex-end !important;
    justify-content: center !important;
    background: rgba(0,0,0,0.45);
    transition: background 0.3s;
    overflow-y: auto;
  }
  .compare-modal-content {
    width: 100vw !important;
    max-width: 100vw !important;
    border-radius: 18px 18px 0 0 !important;
    margin: 0 !important;
    padding-bottom: env(safe-area-inset-bottom, 16px) !important;
    position: relative;
    bottom: 0;
    left: 0;
    animation: compareModalSlideUp 0.35s cubic-bezier(0.4,0,0.2,1);
    box-shadow: 0 -2px 16px rgba(0,0,0,0.12);
    max-height: 80vh;
    overflow-y: auto;
  }
  @keyframes compareModalSlideUp {
    from { transform: translateY(100%); }
    to   { transform: translateY(0); }
  }
}

@media (max-width: 700px) {
  .compare-modal-content {
    max-height: 80vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
  }
}

/* Compare Bags button styles */
.comparemobilebtn {
  border: 2px solid #2f7d7d; 
  color: #2f7d7d; 
  background: transparent; 
  padding: 6px 16px; 
  border-radius: 20px; 
  font-size: 18px; 
  cursor: pointer; 
  margin-bottom: 6px; 
  position: relative; 
  z-index: 100;
}

.comparedesktopbtn {
  border: 2px solid #2f7d7d; 
  color: #2f7d7d; 
  background: transparent; 
  padding: 6px 16px; 
  border-radius: 20px; 
  font-size: 18px; 
  cursor: pointer; 
  margin: 0; 
  position: relative; 
  z-index: 100; 
  pointer-events: auto;
}

@media (max-width: 900px) {
  .comparemobilebtn {
    display: block !important;
    margin-right: 0 !important;
    font-size: 13px !important;
    padding: 4px 8px !important;
  }
  
  .comparedesktopbtn {
    display: none !important;
  }
  
  .mobile-compare-review {
    display: flex !important;
    margin-top: 10px !important;
    margin-bottom: 15px !important;
    min-width: 129px !important;
    justify-content: flex-end !important;
  }
  
  /* Ensure mobile button is visible in mobile-single-image section */
  .mobile-single-image .mobile-compare-review {
    display: flex !important;
    width: 100% !important;
    justify-content: flex-end !important;
  }
}

@media (min-width: 901px) {
  .comparedesktopbtn {
    display: block;
    font-size: 15px !important;
    padding: 5px 14px !important;
    font-weight: 400 !important;
    position: relative !important;
    z-index: 100 !important;
    pointer-events: auto !important;
  }
  
  .mobile-compare-review {
    display: none !important;
  }
  
  .comparemobilebtn {
    display: none !important;
  }
}

@media (max-width: 375px) {
  .mobile-compare-review {
    display: flex !important;
    margin-top: -96px !important;
    min-width: 305px !important;
  }
}
</style>

<!-- Compare Bags Modal HTML -->
<div id="compareBagsModalV2">
  <div class="compare-modal-content">
    <button class="compare-modal-close" id="compareModalClose">&times;</button>
    <div class="compare-modal-header">
      <h2 class="compare-modal-title">Compare Bags</h2>
    </div>
    <div class="compare-modal-tabs">
      <button class="compare-modal-tab active" id="compareTabSize" data-tab="size">Size</button>
      <button class="compare-modal-tab" id="compareTabFabric" data-tab="fabric">Fabric</button>
    </div>
    <div class="compare-modal-grid">
      <div class="compare-modal-labels" id="compareModalLabels">
        <div class="compare-modal-label">Specs</div>
        <div class="compare-modal-label">Features</div>
        <div class="compare-modal-label">Available in</div>
        <div class="compare-modal-label">Price</div>
      </div>
      <div id="compareBagsGridWrap" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 24px;">
        <!-- Grid will be rendered here -->
      </div>
    </div>
  </div>
</div>

<!-- Compare Bags JavaScript -->
<script>
// Immediate fallback function to prevent errors
if (typeof window.openCompareBagsModalV2 === 'undefined') {
  window.openCompareBagsModalV2 = function() {
    console.log('openCompareBagsModalV2 called (FALLBACK)');
    // Wait for the real function to be available
    setTimeout(function() {
      if (typeof window.openCompareBagsModalV2 === 'function' && window.openCompareBagsModalV2.toString().includes('REAL FUNCTION')) {
        window.openCompareBagsModalV2();
      } else {
        console.error('Real function not available yet');
      }
    }, 100);
  };
}

console.log('Compare modal script starting to load...');

// Add error handling for metafield data
try {

// Dynamic product data from Shopify with metafields
const compareProductsData = {
  currentProduct: {
    id: {{ product.id | default: 0 }},
    title: "{{ product.title | escape | default: 'Product' }}",
    image: "{{ product.featured_image | img_url: '300x300' | default: '' }}",
    price: "{{ product.price | money | default: '$0.00' }}",
    url: "{{ product.url | default: '#' }}",
    isCurrentProduct: true,
    // Testing metafields step by step
    capacity: "{% if current_variant.metafields.custom.comparebag_capacity %}{{ current_variant.metafields.custom.comparebag_capacity }}{% else %}70L{% endif %}",
    dimensions: "19\" x 18\" x 4\"",
    weight: "2.5lbs",
    fabric: "420D Cordura Polycarbonate Nylon",
    features: "Water bottle pocket, Luggage pass through, Laptop compartment, Carry handle, Water proof, Zippers, Tech caddy",
    techSpecs: "Silicon Face Coating: This coating provides extreme weather, strain abrasion resistance without changing the look and hand feel of the fabric. Coal PU Backside: This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.",
    overview: "Premium quality bag designed for modern lifestyle.",
    // Available colors/variants
    colors: [
      {% for variant in product.variants %}
        {% if variant.option1 contains 'Color' or variant.option1 contains 'color' %}
          "{{ variant.option1 }}",
        {% endif %}
      {% endfor %}
    ]
  },
  
  // Get size variants for comparison
  sizeVariants: [
    {% for variant in product.variants %}
      {% if variant.option1 contains 'L' or variant.option1 contains 'l' or variant.option1 contains 'Size' or variant.option1 contains 'size' %}
        {
          id: {{ variant.id }},
          title: "{{ product.title | escape }} {{ variant.option1 }}",
          image: "{{ variant.image | default: product.featured_image | img_url: '300x300' }}",
          price: "{{ variant.price | money }}",
          url: "{{ product.url }}?variant={{ variant.id }}",
          isCurrentProduct: {{ variant.id == current_variant.id }},
          variantTitle: "{{ variant.option1 }}",
          capacity: "{{ variant.option1 }}",
          dimensions: "19\" x 18\" x 4\"",
          weight: "2.5lbs",
          fabric: "420D Cordura Polycarbonate Nylon",
          features: "Water bottle pocket, Luggage pass through, Laptop compartment, Carry handle, Water proof, Zippers, Tech caddy",
          techSpecs: "Silicon Face Coating: This coating provides extreme weather, strain abrasion resistance without changing the look and hand feel of the fabric. Coal PU Backside: This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.",
          overview: "Premium quality bag designed for modern lifestyle.",
          colors: [
            {% for color_variant in product.variants %}
              {% if color_variant.option1 contains 'Color' or color_variant.option1 contains 'color' %}
                "{{ color_variant.option1 }}",
              {% endif %}
            {% endfor %}
          ]
        },
      {% endif %}
    {% endfor %}
  ],
  
  // Get fabric variants for comparison
  fabricVariants: [
    {% for variant in product.variants %}
      {% if variant.option2 contains 'Fabric' or variant.option2 contains 'fabric' or variant.option2 contains 'Carbonate' or variant.option2 contains 'Ballistic' or variant.option2 contains 'Nylon' or variant.option2 contains 'Cordura' %}
        {
          id: {{ variant.id }},
          title: "{{ product.title | escape }} {{ variant.option2 }}",
          image: "{{ variant.image | default: product.featured_image | img_url: '300x300' }}",
          price: "{{ variant.price | money }}",
          url: "{{ product.url }}?variant={{ variant.id }}",
          isCurrentProduct: {{ variant.id == current_variant.id }},
          variantTitle: "{{ variant.option2 }}",
          capacity: "{{ variant.option1 }}",
          dimensions: "19\" x 18\" x 4\"",
          weight: "2.5lbs",
          fabric: "{{ variant.option2 }}",
          features: "Water bottle pocket, Luggage pass through, Laptop compartment, Carry handle, Water proof, Zippers, Tech caddy",
          techSpecs: "Silicon Face Coating: This coating provides extreme weather, strain abrasion resistance without changing the look and hand feel of the fabric. Coal PU Backside: This coating makes the fabric waterproof and also weldable which allows the seams of the bag to be bonded for additional weather resistance.",
          overview: "Premium quality bag designed for modern lifestyle.",
          colors: [
            {% for color_variant in product.variants %}
              {% if color_variant.option1 contains 'Color' or color_variant.option1 contains 'color' %}
                "{{ color_variant.option1 }}",
              {% endif %}
            {% endfor %}
          ]
        },
      {% endif %}
    {% endfor %}
  ]
};

console.log('Product data initialized');
console.log('Size variants found:', compareProductsData.sizeVariants.length);
console.log('Fabric variants found:', compareProductsData.fabricVariants.length);
console.log('Current product:', compareProductsData.currentProduct.title);

// Debug capacity value
console.log('=== CAPACITY DEBUG ===');
console.log('Capacity value:', compareProductsData.currentProduct.capacity);
console.log('=== END CAPACITY DEBUG ===');


// Define the modal functions immediately
window.openCompareBagsModalV2 = function() {
  console.log('openCompareBagsModalV2 called (REAL FUNCTION)');
  const modal = document.getElementById('compareBagsModalV2');
  console.log('Modal element:', modal);
  
  if (!modal) {
    console.error('Modal element not found!');
    return;
  }
  
  const content = modal.querySelector('.compare-modal-content');
  modal.style.display = 'flex';
  console.log('Modal displayed');
  
  // Reset animation for mobile
  if (window.innerWidth < 700 && content) {
    content.style.animation = 'none';
    void content.offsetWidth; // trigger reflow
    content.style.animation = null;
  }
  
  renderCompareBagsTable('size');
  document.body.style.overflow = 'hidden';
  enableCompareModalScrollLock();
};

// Also make it available on document
document.openCompareBagsModalV2 = window.openCompareBagsModalV2;

console.log('openCompareBagsModalV2 function defined and assigned');
console.log('Function type:', typeof window.openCompareBagsModalV2);

window.closeCompareBagsModalV2 = function() {
  const modal = document.getElementById('compareBagsModalV2');
  if (modal) {
    modal.style.display = 'none';
  }
  document.body.style.overflow = '';
  disableCompareModalScrollLock();
};

// Also make it available on document
document.closeCompareBagsModalV2 = window.closeCompareBagsModalV2;

console.log('closeCompareBagsModalV2 function defined and assigned');

function switchCompareTab(tab) {
  // Update tab active states
  document.querySelectorAll('.compare-modal-tab').forEach(tabBtn => {
    tabBtn.classList.remove('active');
  });
  document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
  
  // Update labels based on selected tab
  const labels = document.getElementById('compareModalLabels');
  if (tab === 'size') {
    labels.classList.remove('fabric-tab');
    labels.innerHTML = `
      <div class="compare-modal-label">Specs</div>
      <div class="compare-modal-label">Features</div>
      <div class="compare-modal-label">Available in</div>
      <div class="compare-modal-label">Price</div>
    `;
  } else if (tab === 'fabric') {
    labels.classList.add('fabric-tab');
    labels.innerHTML = `
      <div class="compare-modal-label">Fabric</div>
      <div class="compare-modal-label">Tech Specs</div>
      <div class="compare-modal-label">Overview</div>
      <div class="compare-modal-label">Available in</div>
      <div class="compare-modal-label">Price</div>
    `;
  }
  
  renderCompareBagsTable(tab);
}

// Dynamic rendering function for variants
function renderCompareBagsTable(tab) {
  console.log('renderCompareBagsTable called with tab:', tab);
  
  try {
    const gridWrap = document.getElementById('compareBagsGridWrap');
    if (!gridWrap) {
      console.error('compareBagsGridWrap element not found');
      return;
    }
    
    // Choose variants based on selected tab
    let variants = [];
    if (tab === 'size') {
      variants = compareProductsData.sizeVariants || [];
    } else if (tab === 'fabric') {
      variants = compareProductsData.fabricVariants || [];
    }
    
    // If no variants found, show only current product with a message
    if (variants.length === 0) {
      const products = [compareProductsData.currentProduct];
      renderProducts(products, tab);
      
      // Show a message that no variants are available
      if (gridWrap.children.length === 1) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'compare-modal-product';
        messageDiv.innerHTML = `
          <div style="text-align: center; padding: 40px; color: #666;">
            <p>No ${tab === 'size' ? 'size' : 'fabric'} variants available for comparison.</p>
            <p style="font-size: 12px; margin-top: 10px;">Please check back later or contact support.</p>
          </div>
        `;
        gridWrap.appendChild(messageDiv);
      }
      return;
    }
    
    // Combine current product with appropriate variants (limit to 2 total)
    const products = [compareProductsData.currentProduct, ...variants].slice(0, 2);
    
    renderProducts(products, tab);
  } catch (error) {
    console.error('Error rendering compare table:', error);
  }
}

function renderProducts(products, tab) {
  console.log('renderProducts called with', products.length, 'products for tab:', tab);
  
  try {
    const gridWrap = document.getElementById('compareBagsGridWrap');
    if (!gridWrap) {
      console.error('compareBagsGridWrap element not found');
      return;
    }
    
    // Render products in grid layout
    let html = '';
    products.forEach(prod => {
      if (tab === 'size') {
        // Size tab content
        const specs = [];
        if (prod.capacity) specs.push(`Capacity: ${prod.capacity}`);
        if (prod.dimensions) specs.push(`Dimensions: ${prod.dimensions}`);
        if (prod.weight) specs.push(`Weight: ${prod.weight}`);
        const specsString = specs.join('<br>');
        
        // Generate features HTML from richtext
        const featuresHtml = prod.features ? 
          prod.features : // Rich text already contains HTML
          '<li>Water bottle pocket</li><li>Luggage pass through</li><li>Laptop compartment</li>';
        
        // Generate colors HTML
        const colorsHtml = prod.colors && prod.colors.length > 0
          ? prod.colors.map(color => `<div class="compare-modal-color" title="${color}" style="background-color: ${color.toLowerCase() === 'black' ? '#000000' : '#808080'}"></div>`).join('')
          : '<div class="compare-modal-color" style="background-color: #000000"></div><div class="compare-modal-color" style="background-color: #808080"></div>';
        
        html += `
          <div class="compare-modal-product">
            <div class="compare-modal-img-wrap">
              <img class="compare-modal-img" src="${prod.image}" alt="${prod.title}">
            </div>
            
            <h3 class="compare-modal-product-title">${prod.title}</h3>
            <div class="compare-modal-specs">
              ${specsString}
            </div>
            <div class="compare-modal-features">
              ${featuresHtml}
            </div>
            <div class="compare-modal-colors">
              ${colorsHtml}
            </div>
            <div class="compare-modal-price">${prod.price}</div>
            <a href="${prod.url}" class="compare-modal-button ${prod.isCurrentProduct ? 'primary' : 'secondary'}">
              ${prod.isCurrentProduct ? 'Add to Bag' : (tab === 'fabric' ? 'Select Fabric' : 'Select Size')}
            </a>
          </div>
        `;
      } else if (tab === 'fabric') {
        // Fabric tab content
        const fabricHtml = prod.fabric ? prod.fabric : 'Premium fabric';
        
        // Generate colors HTML
        const colorsHtml = prod.colors && prod.colors.length > 0
          ? prod.colors.map(color => `<div class="compare-modal-color" title="${color}" style="background-color: ${color.toLowerCase() === 'black' ? '#000000' : '#808080'}"></div>`).join('')
          : '<div class="compare-modal-color" style="background-color: #000000"></div><div class="compare-modal-color" style="background-color: #808080"></div>';
        
        html += `
          <div class="compare-modal-product">
            <div class="compare-modal-img-wrap">
              <img class="compare-modal-img" src="${prod.image}" alt="${prod.title}">
            </div>
            
            <h3 class="compare-modal-product-title">${prod.title}</h3>
            <div class="compare-modal-fabric">
              ${fabricHtml}
            </div>
            <div class="compare-modal-tech-specs">
              ${prod.techSpecs || 'Premium technical specifications'}
            </div>
            <div class="compare-modal-overview">
              ${prod.overview || 'Premium quality bag designed for modern lifestyle.'}
            </div>
            <div class="compare-modal-colors">
              ${colorsHtml}
            </div>
            <div class="compare-modal-price">${prod.price}</div>
            <a href="${prod.url}" class="compare-modal-button ${prod.isCurrentProduct ? 'primary' : 'secondary'}">
              ${prod.isCurrentProduct ? 'Add to Bag' : (tab === 'fabric' ? 'Select Fabric' : 'Select Size')}
            </a>
          </div>
        `;
      }
    });
    
    gridWrap.innerHTML = html;
    console.log('Modal content rendered successfully with', products.length, 'products');
  } catch (error) {
    console.error('Error rendering products:', error);
  }
}

// Removed renderProducts function - simplified to use direct rendering

// Mobile scroll lock functionality
let compareModalTouchLock = false;

function preventBodyScroll(e) {
  if (!compareModalTouchLock) return;
  const modalContent = document.querySelector('.compare-modal-content');
  if (!modalContent) return;
  
  if (!modalContent.contains(e.target)) {
    e.preventDefault();
    return;
  }
  
  // Allow scroll inside modal content if scrollable
  if (modalContent.scrollHeight > modalContent.clientHeight) {
    return;
  }
  
  // If not scrollable, prevent
  e.preventDefault();
}

function enableCompareModalScrollLock() {
  compareModalTouchLock = true;
  document.body.style.overflow = 'hidden';
  document.addEventListener('touchmove', preventBodyScroll, { passive: false });
  document.addEventListener('wheel', preventBodyScroll, { passive: false });
}

function disableCompareModalScrollLock() {
  compareModalTouchLock = false;
  document.body.style.overflow = '';
  document.removeEventListener('touchmove', preventBodyScroll, { passive: false });
  document.removeEventListener('wheel', preventBodyScroll, { passive: false });
}

// Simple initialization
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded - attaching event listeners');
  attachCompareButtonListeners();
  attachModalEventListeners();
});

// Also try immediately if DOM is already loaded
if (document.readyState !== 'loading') {
  console.log('DOM already loaded - attaching event listeners immediately');
  attachCompareButtonListeners();
  attachModalEventListeners();
}

function attachCompareButtonListeners() {
  // Check if modal exists
  const modal = document.getElementById('compareBagsModalV2');
  console.log('Modal element found:', !!modal);
  
  // Attach to Compare Bags buttons - use multiple selectors for better coverage
  const buttons = document.querySelectorAll('[data-compare-button="true"], #compareBtnMobile, #compareBtnDesktop, .comparedesktopbtn, .comparemobilebtn');
  console.log('Found compare buttons:', buttons.length);
  
  buttons.forEach(btn => {
    if (!btn) return; // Skip if button is null
    
    // Remove any existing listeners to prevent duplicates
    btn.removeEventListener('click', handleCompareButtonClick);
    
    console.log('Adding event listener to button:', btn.id || btn.className);
    btn.addEventListener('click', handleCompareButtonClick);
  });
}

function attachModalEventListeners() {
  // Close modal button
  const closeBtn = document.getElementById('compareModalClose');
  if (closeBtn) {
    closeBtn.addEventListener('click', function(e) {
      e.preventDefault();
      closeCompareBagsModalV2();
    });
  }
  
  // Tab switching
  const tabs = document.querySelectorAll('.compare-modal-tab');
  tabs.forEach(tab => {
    if (!tab) return; // Skip if tab is null
    
    tab.addEventListener('click', function(e) {
      e.preventDefault();
      const tabName = this.getAttribute('data-tab');
      if (tabName) {
        switchCompareTab(tabName);
      }
    });
  });
  
  // Close modal when clicking outside
  const modal = document.getElementById('compareBagsModalV2');
  if (modal) {
    modal.addEventListener('click', function(e) {
      if (e.target === this) {
        closeCompareBagsModalV2();
      }
    });
  }
  
  // Close modal with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const modal = document.getElementById('compareBagsModalV2');
      if (modal && modal.style.display === 'flex') {
        closeCompareBagsModalV2();
      }
    }
  });
}

function handleCompareButtonClick(e) {
  e.preventDefault();
  console.log('Compare button clicked');
  if (typeof openCompareBagsModalV2 === 'function') {
    openCompareBagsModalV2();
  } else {
    console.error('openCompareBagsModalV2 function not available');
  }
}

// Make switchCompareTab globally available
window.switchCompareTab = switchCompareTab;
document.switchCompareTab = switchCompareTab;

console.log('Compare modal script fully loaded');
console.log('Final function availability:');
console.log('- window.openCompareBagsModalV2:', typeof window.openCompareBagsModalV2);
console.log('- document.openCompareBagsModalV2:', typeof document.openCompareBagsModalV2);

// Final check - ensure function is available
if (typeof window.openCompareBagsModalV2 === 'function') {
  console.log('✅ openCompareBagsModalV2 function is ready!');
} else {
  console.error('❌ openCompareBagsModalV2 function is NOT ready!');
}

} catch (error) {
  console.error('Error loading compare modal:', error);
  // Ensure function is available even if there's an error
  if (typeof window.openCompareBagsModalV2 === 'undefined') {
    window.openCompareBagsModalV2 = function() {
      console.log('openCompareBagsModalV2 called (ERROR FALLBACK)');
      alert('Modal is loading, please try again in a moment.');
    };
  }
}
</script> 