<!-- hero_banner section start -->
<div
  data-aos="fade-up"
  data-aos-duration="3000"
  class="hero_banner {% if section.settings.text_position %}text-{{ section.settings.text_position }}{% else %}banner_centered{% endif %}"
  data-auto-slide="{{ section.settings.auto_slide }}"
  {% if section.settings.slide_interval != blank %}data-slide-interval="{{ section.settings.slide_interval | times: 1000 }}"{% endif %}
>
  <div class="hero-slider">
    {% for block in section.blocks %}
      {% if block.type == 'slide' %}
        <div class="hero-slide" {{ block.shopify_attributes }}>
          <div class="banner-wrap-img {% if section.settings.fix %}bwi-inner{% endif %}">
            {% if block.settings.content_type == 'image' %}
              <img src="{{ block.settings.desktop_image | img_url: 'master' }}" class="img-fluid desktop-only" alt="{{ block.settings.heading }}">
              <img src="{{ block.settings.mobile_image | img_url: 'master' }}" class="img-fluid mobile-only" alt="{{ block.settings.heading }}">
            {% elsif block.settings.content_type == 'video' %}
              <div class="video-container desktop-only">
                <video class="hero-video" {% if block.settings.autoplay %}autoplay{% endif %} {% if block.settings.loop %}loop{% endif %} {% if block.settings.muted %}muted{% endif %} playsinline {% if block.settings.controls %}controls{% endif %} poster="{{ block.settings.video_poster | img_url: 'master' | default: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTd5ktBHvLv2pBN0wWvCupiWDx6eXcSKCKChA&s' }}" preload="metadata">
                  {% if block.settings.desktop_video != blank %}
                    <source src="{{ block.settings.desktop_video }}" type="video/mp4">
                  {% endif %}
                </video>
              </div>
              <div class="video-container mobile-only">
                <video class="hero-video" {% if block.settings.autoplay %}autoplay{% endif %} {% if block.settings.loop %}loop{% endif %} {% if block.settings.muted %}muted{% endif %} playsinline {% if block.settings.controls %}controls{% endif %} poster="{{ block.settings.video_poster_mobile | default: block.settings.video_poster | img_url: 'master' | default: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTd5ktBHvLv2pBN0wWvCupiWDx6eXcSKCKChA&s' }}" preload="metadata">
                  {% if block.settings.mobile_video != blank %}
                    <source src="{{ block.settings.mobile_video }}" type="video/mp4">
                  {% elsif block.settings.desktop_video != blank %}
                    <source src="{{ block.settings.desktop_video }}" type="video/mp4">
                  {% endif %}
                </video>
              </div>
            {% endif %}
          </div>

          <div class="container">
            <div class="hero_b" style="{% if block.settings.mobile_padding_top != blank %}--mobile-padding-top: {{ block.settings.mobile_padding_top }}px;{% endif %}">
              <div class="hero_banner_wrap">
                <div class="main_heading_wrap">
                  <h1>{{ block.settings.heading }}</h1>
                  <div class="banner_text">{{ block.settings.text }}</div>

                  {% if block.settings.btn_url %}
                    <div class="cta">
                      <a href="{{ block.settings.btn_url }}" class="btn2 btn3">{{ block.settings.btn_text }}</a>
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <!-- Slider navigation - UPDATED: moved to bottom right -->
  {% if section.blocks.size > 1 %}
    <div class="hero-slider-nav">
      <button class="hero-slider-prev" aria-label="Previous slide">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button class="hero-slider-next" aria-label="Next slide">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
  {% endif %}
</div>

<!-- hero_banner section end -->

<style>
  /* FULL SCREEN HERO - UPDATED */
  .hero_banner {
    position: relative;
    overflow: hidden;
    height: 100vh; /* Full screen height */
    width: 100%;
  }
  
  .hero-slider {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .hero-slide {
    width: 100%;
    height: 100%; /* Full height */
    display: none;
    position: relative;
  }
  
  .hero-slide:first-child {
    display: block;
  }
  
  .banner-wrap-img {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  /* IMPROVED IMAGE/VIDEO HANDLING */
  .banner-wrap-img img,
  .banner-wrap-img video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  .video-container {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
  }
  
  .hero-video {
    width: 100%;
    height: 100%;
    color: transparent !important;
    background: transparent !important;
    font-size: 0 !important;
    line-height: 0 !important;
  }
  .hero-video::before,
  .hero-video::after {
    display: none !important;
    content: none !important;
  }
  
  .hero_b {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    z-index: 5;
  }
  
  /* Text positioning classes */
  .hero_banner.text-left .hero_b {
    left: 0;
    transform: translateY(-50%);
    text-align: left;
    padding-left: 80px;
    width: auto;
    max-width: 60%;
  }
  
  .hero_banner.text-left .main_heading_wrap {
    text-align: left;
  }
  
  .hero_banner.text-left .main_heading_wrap h1,
  .hero_banner.text-left .main_heading_wrap .banner_text,
  .hero_banner.text-left .main_heading_wrap .cta {
    text-align: left;
    margin-left: 0;
    margin-right: auto;
    
  }
  
  .hero_banner.text-left .main_heading_wrap .cta {
    display: flex;
    justify-content: flex-start;
  }
  
  .hero_banner.text-right .hero_b {
    left: auto;
    right: 0;
    transform: translateY(-50%);
    text-align: right;
    padding-right: 80px;
    width: auto;
    max-width: 60%;
  }
  
  .hero_banner.text-center .hero_b,
  .hero_banner.banner_centered .hero_b {
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }
  
  .banner_centered .main_heading_wrap .banner_text p {
    max-width: 480px;
    margin: 0 auto;
  }
  
  .text-left .main_heading_wrap .banner_text p {
    max-width: 480px;
    margin: 0;
  }
  
  .text-right .main_heading_wrap .banner_text p {
    max-width: 480px;
    margin-left: auto;
    margin-right: 0;
  }
  
  /* SLIDER NAVIGATION - UPDATED: moved to bottom right, smaller size */
  .hero-slider-nav {
    position: absolute;
    bottom: 30px;
    right: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    gap: 10px;
  }
  
  .hero-slider-prev,
  .hero-slider-next {
    background: rgba(255, 255, 255, 0.3);
    border: none;
    width: 21px; /* Smaller size */
    height: 21px; /* Smaller size */
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background 0.3s ease;
    border-radius: 0;
  }
  
  .hero-slider-prev:hover,
  .hero-slider-next:hover {
    background: rgba(255, 255, 255, 0.5);
  }
  
  /* REMOVED DOTS - as requested */
  .hero-slider-dots {
    display: none;
  }
  
  /* Mobile styles */
  @media (max-width: 767px) {
    .desktop-only {
      display: none;
    }
    
    .mobile-only {
      display: block;
    }
    
    .hero_banner.text-left .hero_b,
    .hero_banner.text-right .hero_b {
      padding-left: 20px;
      padding-right: 20px;
      max-width: 100%;
    }
    
    .hero-slider-nav {
      bottom: 20px;
      right: 20px;
    }
    
    .hero-slider-prev,
    .hero-slider-next {
      width: 36px;
      height: 36px;
    }
  }
  
  @media (min-width: 768px) {
    .desktop-only {
      display: block;
    }
    
    .mobile-only {
      display: none;
    }
  }
  
  @media (max-width: 600px) {
    .banner_centered .hero_b {
      top: var(--mobile-padding-top, 50%);
      transform: translateY(-50%) translateX(-50%);
    }
    
    .text-left .hero_b {
      top: var(--mobile-padding-top, 50%);
      transform: translateY(-50%);
      left: 0;
      width: 100%;
      max-width: 100%;
    }
    
    .text-right .hero_b {
      top: var(--mobile-padding-top, 50%);
      transform: translateY(-50%);
      right: 0;
      width: 100%;
      max-width: 100%;
    }
    
    .banner_centered .main_heading_wrap .btn2,
    .text-left .main_heading_wrap .btn2,
    .text-right .main_heading_wrap .btn2 {
      margin-top: 12px;
    }
    
    .main_heading_wrap h1 {
      font-size: 24px;
      margin-bottom: 10px;
    }
    
    .banner_text p {
      font-size: 14px;
    }
  }
  /* Hide Shopify/theme 'No image' placeholder in hero banner */
  .hero_banner img[alt="No image"],
  .hero_banner img[alt="no image"],
  .hero_banner img[src*="no-image"],
  .hero_banner .no-image {
    display: none !important;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize hero slider
    const slides = document.querySelectorAll('.hero-slide');
    if (slides.length <= 1) return;
    
    const heroSlider = document.querySelector('.hero_banner');
    const prevButton = document.querySelector('.hero-slider-prev');
    const nextButton = document.querySelector('.hero-slider-next');
    let currentSlide = 0;
    let autoSlideInterval;
    
    // Get auto-slide setting from data attribute
    const autoSlideEnabled = heroSlider.getAttribute('data-auto-slide') === 'true';
    const slideInterval = parseInt(heroSlider.getAttribute('data-slide-interval')) || 5000; // Default to 5 seconds
    
    // Show slide function
    function showSlide(index) {
      // Hide all slides
      slides.forEach(slide => {
        slide.style.display = 'none';
      });
      
      // Show current slide
      slides[index].style.display = 'block';
      
      // Handle video autoplay
      const currentVideo = slides[index].querySelector('video');
      if (currentVideo && currentVideo.hasAttribute('autoplay')) {
        currentVideo.currentTime = 0;
        currentVideo.play().catch(e => console.log('Video autoplay prevented:', e));
      }
      
      // Pause other videos
      slides.forEach((slide, i) => {
        if (i !== index) {
          const video = slide.querySelector('video');
          if (video) video.pause();
        }
      });
    }
    
    // Go to slide function
    function goToSlide(index) {
      currentSlide = index;
      showSlide(currentSlide);
      resetAutoSlide();
    }
    
    // Next slide function
    function nextSlide() {
      currentSlide = (currentSlide + 1) % slides.length;
      showSlide(currentSlide);
      resetAutoSlide();
    }
    
    // Previous slide function
    function prevSlide() {
      currentSlide = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(currentSlide);
      resetAutoSlide();
    }
    
    // Auto slide function
    function startAutoSlide() {
      if (!autoSlideEnabled) return; // Don't start auto-slide if disabled
      
      if (autoSlideInterval) {
        clearInterval(autoSlideInterval);
      }
      autoSlideInterval = setInterval(nextSlide, slideInterval);
    }
    
    // Reset auto slide timer
    function resetAutoSlide() {
      if (!autoSlideEnabled) return; // Don't reset if auto-slide is disabled
      
      clearInterval(autoSlideInterval);
      startAutoSlide();
    }
    
    // Event listeners
    if (prevButton) prevButton.addEventListener('click', prevSlide);
    if (nextButton) nextButton.addEventListener('click', nextSlide);
    
    // Touch swipe functionality
    let touchStartX = 0;
    let touchEndX = 0;
    
    const slider = document.querySelector('.hero-slider');
    
    slider.addEventListener('touchstart', e => {
      touchStartX = e.changedTouches[0].screenX;
    }, {passive: true});
    
    slider.addEventListener('touchend', e => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, {passive: true});
    
    function handleSwipe() {
      const swipeThreshold = 50;
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swipe left, go to next slide
        nextSlide();
      } else if (touchEndX > touchStartX + swipeThreshold) {
        // Swipe right, go to previous slide
        prevSlide();
      }
    }
    
    // Initialize slider
    showSlide(currentSlide);
    startAutoSlide(); // This will only start if auto-slide is enabled
  });
</script>

{% schema %}
{
  "name": "Hero Slider",
  "settings": [
    {
      "type": "checkbox",
      "id": "fix",
      "label": "Fix Scaling issue"
    },
    {
      "type": "select",
      "id": "text_position",
      "label": "Text Position",
      "options": [
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "header",
      "content": "Slider Settings"
    },
    {
      "type": "checkbox",
      "id": "auto_slide",
      "label": "Enable Auto-Slide",
      "default": true,
      "info": "Automatically rotate through slides"
    },
    {
      "type": "range",
      "id": "slide_interval",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Auto-Slide Interval",
      "default": 5,
      "info": "Time between slide transitions (in seconds)"
    }
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
          "type": "select",
          "id": "content_type",
          "label": "Content Type",
          "options": [
            {
              "value": "image",
              "label": "Image"
            },
            {
              "value": "video",
              "label": "Video"
            }
          ],
          "default": "image"
        },
        {
          "type": "header",
          "content": "Image Settings"
        },
        {
          "type": "image_picker",
          "id": "desktop_image",
          "label": "Desktop Image",
          "info": "Recommended size: 1920 x 1080 pixels"
        },
        {
          "type": "image_picker",
          "id": "mobile_image",
          "label": "Mobile Image",
          "info": "Recommended size: 768 x 1024 pixels"
        },
        {
          "type": "header",
          "content": "Video Settings"
        },
        {
          "type": "text",
          "id": "desktop_video",
          "label": "Desktop Video URL",
          "info": "First upload your video in Settings > Files, then copy the URL here. MP4 format recommended."
        },
        {
          "type": "text",
          "id": "mobile_video",
          "label": "Mobile Video URL (optional)",
          "info": "If not provided, desktop video will be used. Upload in Settings > Files."
        },
        {
          "type": "image_picker",
          "id": "video_poster",
          "label": "Video Poster Image (Desktop)",
          "info": "Shown before video plays"
        },
        {
          "type": "image_picker",
          "id": "video_poster_mobile",
          "label": "Video Poster Image (Mobile)",
          "info": "If not provided, desktop poster will be used"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay video",
          "default": true,
          "info": "Autoplays on supported browsers"
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop video",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "muted",
          "label": "Mute video",
          "default": true,
          "info": "Video must be muted for autoplay to work"
        },
        {
          "type": "checkbox",
          "id": "controls",
          "label": "Show video controls",
          "default": false
        },
        {
          "type": "header",
          "content": "Content Settings"
        },
        {
          "type": "textarea",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text"
        },
        {
          "type": "text",
          "id": "btn_text",
          "label": "Button Text"
        },
        {
          "type": "url",
          "id": "btn_url",
          "label": "Button Link"
        },
        {
          "type": "header",
          "content": "Mobile Settings"
        },
        {
          "type": "number",
          "id": "mobile_padding_top",
          "label": "Mobile - Padding from top (%)",
          "info": "Adjust text position from top on mobile",
          "default": 50
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Hero Slider",
      "blocks": [
        {
          "type": "slide"
        }
      ]
    }
  ]
}
{% endschema %}